type CategoryNode implements Node {
  """The ID of the object."""
  id: ID!
  code: String!
  name: String!
  isActive: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  products(before: String, after: String, first: Int, last: Int, code: String): ProductNodeConnection!
}

type CategoryNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [CategoryNodeEdge]!
}

"""A Relay edge containing a `CategoryNode` and its cursor."""
type CategoryNodeEdge {
  """The item at the end of the edge"""
  node: CategoryNode

  """A cursor for use in pagination"""
  cursor: String!
}

type CompanyCustomerProfileNode implements Node {
  """The ID of the object."""
  id: ID!
  name: String!
  address: String!
  taxCode: String!
  own: CustomerNode!
  liability: Float
  liabilityLimit: Float
  representatives(before: String, after: String, first: Int, last: Int, id: ID): IndividualCustomerProfileNodeConnection!
}

type CompanyCustomerProfileNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [CompanyCustomerProfileNodeEdge]!
}

"""A Relay edge containing a `CompanyCustomerProfileNode` and its cursor."""
type CompanyCustomerProfileNodeEdge {
  """The item at the end of the edge"""
  node: CompanyCustomerProfileNode

  """A cursor for use in pagination"""
  cursor: String!
}

input CreateCategoryInput {
  code: String!
  name: String!
  isActive: Boolean
  products: [ID]
}

type CreateCategoryMutation {
  category: CategoryNode
}

input CreateKeyResultInput {
  objective: ID!
  description: String!
  finishedDate: Date!
  deadline: Date
  isPublic: Boolean
}

type CreateKeyResultMutation {
  keyResult: KeyResultNode
}

input CreateObjectiveInput {
  description: String!
  finishedDate: Date!
  deadline: Date
  user: ID!
  tags: [ID]!
  isPublic: Boolean
  keyResults: [ID]
}

type CreateObjectiveMutation {
  objective: ObjectiveNode
}

input CreateProductInput {
  category: ID!
  code: String!
  name: String!
  listedPrice: Float
  attributes: String
  isActive: Boolean
  orders: [ID]
}

type CreateProductMutation {
  product: ProductNode
}

input CreateTagInput {
  name: String!
  user: ID!
  isPublic: Boolean
  objectiveSet: [ID]
}

type CreateTagMutation {
  tag: TagNode
}

input CreateUserInput {
  password: String!
  email: String!
}

type CreateUserMutation {
  user: UserNode
}

type CustomerGroupNode implements Node {
  """The ID of the object."""
  id: ID!
  code: String!
  name: String!
  customer(before: String, after: String, first: Int, last: Int, code: String): CustomerNodeConnection!
}

type CustomerGroupNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [CustomerGroupNodeEdge]!
}

"""A Relay edge containing a `CustomerGroupNode` and its cursor."""
type CustomerGroupNodeEdge {
  """The item at the end of the edge"""
  node: CustomerGroupNode

  """A cursor for use in pagination"""
  cursor: String!
}

type CustomerNode implements Node {
  """The ID of the object."""
  id: ID!
  code: String!
  customerGroup: CustomerGroupNode!
  individualProfile(before: String, after: String, first: Int, last: Int, id: ID): IndividualCustomerProfileNodeConnection!
  companyProfile(before: String, after: String, first: Int, last: Int, id: ID): CompanyCustomerProfileNodeConnection!
}

type CustomerNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [CustomerNodeEdge]!
}

"""A Relay edge containing a `CustomerNode` and its cursor."""
type CustomerNodeEdge {
  """The item at the end of the edge"""
  node: CustomerNode

  """A cursor for use in pagination"""
  cursor: String!
}

"""
The `Date` scalar type represents a Date
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Date

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

type DeleteKeyResultMutation {
  found: Boolean
  deletedId: ID
}

type DeleteObjectiveMutation {
  found: Boolean
  deletedId: ID
}

type DeleteTagMutation {
  found: Boolean
  deletedId: ID
}

type ErrorType {
  field: String!
  messages: [String!]!
}

"""
The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar

type GroupNode {
  id: ID!
  name: String!

  """
  The groups this user belongs to. A user will get all permissions granted to each of their groups.
  """
  userSet(before: String, after: String, first: Int, last: Int, id: ID, email: String): UserNodeConnection!
}

type IndividualCustomerProfileNode implements Node {
  firstName: String
  lastName: String
  mobile: String
  address: String
  position: String!
  dob: Date

  """The ID of the object."""
  id: ID!
  own: CustomerNode!
  email: String
  liability: Float
  liabilityLimit: Float
  companycustomerprofileSet(before: String, after: String, first: Int, last: Int, id: ID): CompanyCustomerProfileNodeConnection!
}

type IndividualCustomerProfileNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [IndividualCustomerProfileNodeEdge]!
}

"""
A Relay edge containing a `IndividualCustomerProfileNode` and its cursor.
"""
type IndividualCustomerProfileNodeEdge {
  """The item at the end of the edge"""
  node: IndividualCustomerProfileNode

  """A cursor for use in pagination"""
  cursor: String!
}

type KeyResultNode implements Node {
  """The ID of the object."""
  id: ID!
  objective: ObjectiveNode!
  description: String!
  finishedDate: Date!
  deadline: Date
  isPublic: Boolean!
}

type KeyResultNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [KeyResultNodeEdge]!
}

"""A Relay edge containing a `KeyResultNode` and its cursor."""
type KeyResultNodeEdge {
  """The item at the end of the edge"""
  node: KeyResultNode

  """A cursor for use in pagination"""
  cursor: String!
}

input LogInMutationInput {
  email: String!
  password: String!
  id: ID
  clientMutationId: String
}

type LogInMutationPayload {
  user: UserNode
  errors: [ErrorType]
  token: String
  refreshToken: String
  clientMutationId: String
}

type LogOutMutation {
  token: String
}

type Mutation {
  createProduct(input: CreateProductInput!): CreateProductMutation
  patchProduct(id: ID!, input: PatchProductInput!): PatchProductMutation
  createCategory(input: CreateCategoryInput!): CreateCategoryMutation
  patchCategory(id: ID!, input: PatchCategoryInput!): PatchCategoryMutation
  createUser(input: CreateUserInput!): CreateUserMutation
  patchUser(id: ID!, input: PatchUserInput!): PatchUserMutation
  login(input: LogInMutationInput!): LogInMutationPayload
  logout(token: String): LogOutMutation
  createTag(input: CreateTagInput!): CreateTagMutation
  patchTag(id: ID!, input: PatchTagInput!): PatchTagMutation
  deleteTag(id: ID!): DeleteTagMutation
  createObjective(input: CreateObjectiveInput!): CreateObjectiveMutation
  patchObjective(id: ID!, input: PatchObjectiveInput!): PatchObjectiveMutation
  deleteObjective(id: ID!): DeleteObjectiveMutation
  createKeyresult(input: CreateKeyResultInput!): CreateKeyResultMutation
  patchKeyResult(id: ID!, input: PatchKeyResultInput!): PatchKeyResultMutation
  deleteKeyResult(id: ID!): DeleteKeyResultMutation

  """Obtain JSON Web Token mutation"""
  tokenAuth(email: String!, password: String!): ObtainJSONWebToken
  verifyToken(token: String!): Verify
  refreshToken(refreshToken: String!): Refresh
  revokeToken(input: RevokeInput!): RevokePayload
}

"""An object with an ID"""
interface Node {
  """The ID of the object."""
  id: ID!
}

type ObjectiveNode implements Node {
  """The ID of the object."""
  id: ID!
  description: String!
  finishedDate: Date!
  deadline: Date
  user: UserNode!
  tags(before: String, after: String, first: Int, last: Int, name: String): TagNodeConnection!
  isPublic: Boolean!
  keyResults(before: String, after: String, first: Int, last: Int, description: String, description_Icontains: String, description_Istartswith: String): KeyResultNodeConnection!
}

type ObjectiveNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [ObjectiveNodeEdge]!
}

"""A Relay edge containing a `ObjectiveNode` and its cursor."""
type ObjectiveNodeEdge {
  """The item at the end of the edge"""
  node: ObjectiveNode

  """A cursor for use in pagination"""
  cursor: String!
}

"""Obtain JSON Web Token mutation"""
type ObtainJSONWebToken {
  token: String
  refreshToken: String
}

type OrderNode implements Node {
  """The ID of the object."""
  id: ID!
  product: ProductNode!
}

type OrderNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [OrderNodeEdge]!
}

"""A Relay edge containing a `OrderNode` and its cursor."""
type OrderNodeEdge {
  """The item at the end of the edge"""
  node: OrderNode

  """A cursor for use in pagination"""
  cursor: String!
}

"""
The Relay compliant `PageInfo` type, containing data necessary to paginate this connection.
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

input PatchCategoryInput {
  code: String
  name: String
  isActive: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  products: [ID]
}

type PatchCategoryMutation {
  category: CategoryNode
}

input PatchKeyResultInput {
  objective: ID
  description: String
  finishedDate: Date
  deadline: Date
  isPublic: Boolean
}

type PatchKeyResultMutation {
  keyResult: KeyResultNode
}

input PatchObjectiveInput {
  description: String
  finishedDate: Date
  deadline: Date
  user: ID
  tags: [ID]
  isPublic: Boolean
  keyResults: [ID]
}

type PatchObjectiveMutation {
  objective: ObjectiveNode
}

input PatchProductInput {
  category: ID
  code: String
  name: String
  listedPrice: Float
  attributes: String
  isActive: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  orders: [ID]
}

type PatchProductMutation {
  product: ProductNode
}

input PatchTagInput {
  name: String
  user: ID
  isPublic: Boolean
  objectiveSet: [ID]
}

type PatchTagMutation {
  tag: TagNode
}

input PatchUserInput {
  password: String
  email: String
}

type PatchUserMutation {
  user: UserNode
}

type ProductNode implements Node {
  """The ID of the object."""
  id: ID!
  category: CategoryNode!
  code: String!
  name: String!
  listedPrice: Float!
  attributes: String!
  isActive: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  orders(before: String, after: String, first: Int, last: Int, id: ID): OrderNodeConnection!
}

type ProductNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [ProductNodeEdge]!
}

"""A Relay edge containing a `ProductNode` and its cursor."""
type ProductNodeEdge {
  """The item at the end of the edge"""
  node: ProductNode

  """A cursor for use in pagination"""
  cursor: String!
}

type Query {
  """The ID of the object"""
  customer(id: ID!): CustomerNode
  customers(before: String, after: String, first: Int, last: Int, code: String): CustomerNodeConnection

  """The ID of the object"""
  customerGroup(id: ID!): CustomerGroupNode
  customerGroups(before: String, after: String, first: Int, last: Int, code: String): CustomerGroupNodeConnection

  """The ID of the object"""
  staffProfile(id: ID!): StaffProfileNode
  staffProfiles(before: String, after: String, first: Int, last: Int, id: ID): StaffProfileNodeConnection

  """The ID of the object"""
  individualCustomerProfile(id: ID!): IndividualCustomerProfileNode
  individualCustomerProfiles(before: String, after: String, first: Int, last: Int, id: ID): IndividualCustomerProfileNodeConnection

  """The ID of the object"""
  companyCustomerProfile(id: ID!): CompanyCustomerProfileNode
  companyCustomerProfiles(before: String, after: String, first: Int, last: Int, id: ID): CompanyCustomerProfileNodeConnection
  products(before: String, after: String, first: Int, last: Int, code: String): ProductNodeConnection
  categories(before: String, after: String, first: Int, last: Int, code: String): CategoryNodeConnection

  """The ID of the object"""
  order(id: ID!): OrderNode
  oders(before: String, after: String, first: Int, last: Int, id: ID): OrderNodeConnection

  """The ID of the object"""
  user(id: ID!): UserNode
  allUsers(before: String, after: String, first: Int, last: Int, id: ID, email: String): UserNodeConnection
  me: UserNode

  """The ID of the object"""
  tag(id: ID!): TagNode
  tags(before: String, after: String, first: Int, last: Int, name: String): TagNodeConnection
  myTags(before: String, after: String, first: Int, last: Int, name: String): TagNodeConnection

  """The ID of the object"""
  objective(id: ID!): ObjectiveNode
  objectives(before: String, after: String, first: Int, last: Int, description: String, description_Icontains: String, description_Istartswith: String): ObjectiveNodeConnection

  """The ID of the object"""
  keyResult(id: ID!): KeyResultNode
  keyResults(before: String, after: String, first: Int, last: Int, description: String, description_Icontains: String, description_Istartswith: String): KeyResultNodeConnection
}

type Refresh {
  token: String
  payload: GenericScalar
  refreshToken: String
}

input RevokeInput {
  refreshToken: String!
  clientMutationId: String
}

type RevokePayload {
  revoked: Int
  clientMutationId: String
}

type StaffProfileNode implements Node {
  """The ID of the object."""
  id: ID!
  firstName: String
  lastName: String
  mobile: String
  address: String
  position: String!
  dob: Date
  user: UserNode!
  liability: Float
  liabilityLimit: Float
}

type StaffProfileNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [StaffProfileNodeEdge]!
}

"""A Relay edge containing a `StaffProfileNode` and its cursor."""
type StaffProfileNodeEdge {
  """The item at the end of the edge"""
  node: StaffProfileNode

  """A cursor for use in pagination"""
  cursor: String!
}

type TagNode implements Node {
  """The ID of the object."""
  id: ID!
  name: String!
  user: UserNode!
  isPublic: Boolean!
  objectiveSet(before: String, after: String, first: Int, last: Int, description: String, description_Icontains: String, description_Istartswith: String): ObjectiveNodeConnection!
}

type TagNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [TagNodeEdge]!
}

"""A Relay edge containing a `TagNode` and its cursor."""
type TagNodeEdge {
  """The item at the end of the edge"""
  node: TagNode

  """A cursor for use in pagination"""
  cursor: String!
}

type UserNode implements Node {
  """The ID of the object."""
  id: ID!
  password: String!
  lastLogin: DateTime

  """
  Designates that this user has all permissions without explicitly assigning them.
  """
  isSuperuser: Boolean!

  """
  The groups this user belongs to. A user will get all permissions granted to each of their groups.
  """
  groups: [GroupNode!]!
  email: String!
  isActive: Boolean!
  isStaff: Boolean!
  tag(before: String, after: String, first: Int, last: Int, name: String): TagNodeConnection!
  objectives(before: String, after: String, first: Int, last: Int, description: String, description_Icontains: String, description_Istartswith: String): ObjectiveNodeConnection!
  profile(before: String, after: String, first: Int, last: Int, id: ID): StaffProfileNodeConnection!
  group: GroupNode
}

type UserNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [UserNodeEdge]!
}

"""A Relay edge containing a `UserNode` and its cursor."""
type UserNodeEdge {
  """The item at the end of the edge"""
  node: UserNode

  """A cursor for use in pagination"""
  cursor: String!
}

type Verify {
  payload: GenericScalar
}

